'use client'
import AppShell from '@/components/AppShell'
import { useRequireAuth } from '@/utils/protectedRoute'
import { useEffect, useState } from 'react'
import { firestore } from '@/lib/firebaseClient'
import { doc, getDoc, setDoc, collection, getDocs } from 'firebase/firestore'
import Button from '@/components/Button'

const COLOR_KEYS = [
  'primary',
  'accent',
  'danger',
  'neutral-900',
  'neutral-700',
  'page',
  'card',
  'border',
  'muted1',
  'muted2',
]

export default function AdminPage() {
  const { user, loading } = useRequireAuth()
  const [theme, setTheme] = useState({})
  const [app, setApp] = useState({ habitDefault: 40, habitGoal: 100 })
  const [allowed, setAllowed] = useState(false)
  const [checkingAdmin, setCheckingAdmin] = useState(true)
  const [busy, setBusy] = useState(false)
  const [showCreateAdmin, setShowCreateAdmin] = useState(false)
  const [creatingAdmin, setCreatingAdmin] = useState(false)

  useEffect(() => {
    async function init() {
      if (!user) return
      
      try {
        // Check if user is admin by looking up their role in users collection
        const userDoc = await getDoc(doc(firestore, 'users', user.uid))
        if (userDoc.exists()) {
          const userData = userDoc.data()
          if (userData.role === 'admin') {
            setAllowed(true)
          }
        }
        
        // Load theme and app settings if admin
        if (allowed) {
          const themeSnap = await getDoc(doc(firestore, 'settings', 'theme'))
          if (themeSnap.exists()) setTheme(themeSnap.data())
          const appSnap = await getDoc(doc(firestore, 'settings', 'app'))
          if (appSnap.exists()) setApp((prev) => ({ ...prev, ...appSnap.data() }))
        }
      } catch (error) {
        console.error('Error checking admin status:', error)
      } finally {
        setCheckingAdmin(false)
      }
    }
    init()
  }, [user, allowed])

  const createAdminUser = async () => {
    try {
      setCreatingAdmin(true)
      
      // Create admin user document
      const adminUser = {
        id: user.uid,
        email: user.email,
        name: user.displayName || 'Admin User',
        role: 'admin',
        subscription_status: 'active',
        task_limit: 1000,
        habit_limit: 100,
        sheet_limit: 50,
        created_at: new Date(),
        updated_at: new Date()
      }
      
      await setDoc(doc(firestore, 'users', user.uid), adminUser)
      
      // Create default app settings
      const defaultSettings = {
        trial: {
          default_duration_days: 7,
          max_extensions: 1
        },
        limits: {
          default_task_limit: 50,
          default_habit_limit: 10,
          default_sheet_limit: 5,
          max_task_limit: 1000,
          max_habit_limit: 100,
          max_sheet_limit: 50
        },
        features: {
          enable_analytics: true,
          enable_export: true,
          enable_sharing: true,
          enable_backup: true
        },
        security: {
          max_login_attempts: 5,
          session_timeout_minutes: 60,
          require_email_verification: true,
          enable_two_factor: false
        },
        created_at: new Date(),
        updated_at: new Date()
      }
      
      await setDoc(doc(firestore, 'settings', 'app'), defaultSettings)
      
      // Create default packages
      const defaultPackages = [
        {
          id: 'free-tier',
          name: 'Free Tier',
          price: 0,
          trial_period_days: 0,
          task_limit: 10,
          habit_limit: 3,
          sheet_limit: 2,
          description: 'Basic features for getting started',
          created_at: new Date(),
          updated_at: new Date()
        },
        {
          id: 'basic-plan',
          name: 'Basic Plan',
          price: 9.99,
          trial_period_days: 7,
          task_limit: 100,
          habit_limit: 20,
          sheet_limit: 10,
          description: 'Perfect for individual users and small teams',
          created_at: new Date(),
          updated_at: new Date()
        },
        {
          id: 'pro-plan',
          name: 'Pro Plan',
          price: 19.99,
          trial_period_days: 14,
          task_limit: 500,
          habit_limit: 50,
          sheet_limit: 25,
          description: 'Advanced features for power users and growing teams',
          created_at: new Date(),
          updated_at: new Date()
        },
        {
          id: 'enterprise',
          name: 'Enterprise',
          price: 49.99,
          trial_period_days: 30,
          task_limit: 1000,
          habit_limit: 100,
          sheet_limit: 50,
          description: 'Unlimited features for large organizations',
          created_at: new Date(),
          updated_at: new Date()
        }
      ]
      
      for (const pkg of defaultPackages) {
        await setDoc(doc(firestore, 'packages', pkg.id), pkg)
      }
      
      setAllowed(true)
      setShowCreateAdmin(false)
      alert('Admin user created successfully! You now have admin access.')
      
    } catch (error) {
      console.error('Error creating admin user:', error)
      alert('Failed to create admin user: ' + error.message)
    } finally {
      setCreatingAdmin(false)
    }
  }

  if (loading || checkingAdmin) {
    return (
      <AppShell>
        <div className="bg-card border border-border rounded-lg p-6 text-center">
          <div className="animate-spin rounded-full h-12 w-12 border-b-2 border-primary mx-auto mb-4"></div>
          <p>Loading admin panel...</p>
        </div>
      </AppShell>
    )
  }

  if (!allowed) {
    return (
      <AppShell>
        <div className="bg-card border border-border rounded-lg p-6 text-center">
          <h2 className="text-xl font-semibold mb-4">Admin Access Required</h2>
          <p className="text-muted-foreground mb-6">
            You need admin privileges to access this panel.
          </p>
          
          {!showCreateAdmin ? (
            <Button 
              onClick={() => setShowCreateAdmin(true)}
              variant="primary"
            >
              Create Admin User
            </Button>
          ) : (
            <div className="space-y-4">
              <p className="text-sm text-muted-foreground">
                This will create an admin user with your current account ({user.email})
              </p>
              <div className="flex gap-3 justify-center">
                <Button 
                  onClick={createAdminUser}
                  variant="primary"
                  disabled={creatingAdmin}
                >
                  {creatingAdmin ? 'Creating...' : 'Confirm Create Admin'}
                </Button>
                <Button 
                  onClick={() => setShowCreateAdmin(false)}
                  variant="secondary"
                >
                  Cancel
                </Button>
              </div>
            </div>
          )}
        </div>
      </AppShell>
    )
  }

  async function save() {
    try {
      setBusy(true)
      await setDoc(doc(firestore, 'settings', 'theme'), theme, { merge: true })
      await setDoc(doc(firestore, 'settings', 'app'), app, { merge: true })
      alert('Saved!')
    } catch (e) {
      console.error(e)
      alert('Save failed')
    } finally {
      setBusy(false)
    }
  }

  return (
    <AppShell>
      <div className="space-y-6">
        <div className="flex justify-between items-center">
          <h1 className="text-3xl font-bold">Admin Panel</h1>
          <div className="text-sm text-muted-foreground">
            Welcome, {user.email}
          </div>
        </div>
        
        <div className="grid grid-cols-1 lg:grid-cols-2 gap-6">
          <section className="bg-card border border-border rounded-lg p-4 shadow-soft">
            <h2 className="font-semibold mb-3">Theme</h2>
            <div className="grid grid-cols-2 gap-3">
              {COLOR_KEYS.map((k) => (
                <div key={k} className="flex items-center gap-3">
                  <label className="w-32 text-sm text-neutral-700">{k}</label>
                  <input
                    type="color"
                    value={theme?.[k] || ''}
                    onChange={(e) => setTheme((t) => ({ ...t, [k]: e.target.value }))}
                    className="h-8 w-12"
                  />
                  <input
                    type="text"
                    value={theme?.[k] || ''}
                    onChange={(e) => setTheme((t) => ({ ...t, [k]: e.target.value }))}
                    className="flex-1 border border-border rounded-md px-2 py-1 text-sm"
                  />
                </div>
              ))}
              <div className="flex items-center gap-3">
                <label className="w-32 text-sm text-neutral-700">radius-md</label>
                <input
                  type="text"
                  value={theme?.['radius-md'] || ''}
                  onChange={(e) => setTheme((t) => ({ ...t, ['radius-md']: e.target.value }))}
                  className="flex-1 border border-border rounded-md px-2 py-1 text-sm"
                  placeholder="8px"
                />
              </div>
              <div className="flex items-center gap-3">
                <label className="w-32 text-sm text-neutral-700">radius-lg</label>
                <input
                  type="text"
                  value={theme?.['radius-lg'] || ''}
                  onChange={(e) => setTheme((t) => ({ ...t, ['radius-lg']: e.target.value }))}
                  className="flex-1 border border-border rounded-md px-2 py-1 text-sm"
                  placeholder="12px"
                />
              </div>
              <div className="flex items-center gap-3">
                <label className="w-32 text-sm text-neutral-700">soft-shadow</label>
                <input
                  type="text"
                  value={theme?.['soft-shadow'] || ''}
                  onChange={(e) => setTheme((t) => ({ ...t, ['soft-shadow']: e.target.value }))}
                  className="flex-1 border border-border rounded-md px-2 py-1 text-sm"
                  placeholder="0 6px 18px rgba(12,15,20,0.06)"
                />
              </div>
            </div>
          </section>

          <section className="bg-card border border-border rounded-lg p-4 shadow-soft">
            <h2 className="font-semibold mb-3">App Settings</h2>
            <div className="space-y-3">
              <div className="flex items-center gap-3">
                <label className="w-48 text-sm text-neutral-700">Default habit streak</label>
                <input
                  type="number"
                  value={app.habitDefault}
                  onChange={(e) =>
                    setApp((a) => ({ ...a, habitDefault: Number(e.target.value || 0) }))
                  }
                  className="border border-border rounded-md px-2 py-1 text-sm w-24"
                />
                <span className="text-neutral-700">/</span>
                <input
                  type="number"
                  value={app.habitGoal}
                  onChange={(e) => setApp((a) => ({ ...a, habitGoal: Number(e.target.value || 0) }))}
                  className="border border-border rounded-md px-2 py-1 text-sm w-24"
                />
              </div>
            </div>
          </section>
        </div>
        
        <div className="mt-4">
          <Button variant="primary" onClick={save} disabled={busy}>
            {busy ? 'Saving...' : 'Save to Firestore'}
          </Button>
        </div>
      </div>
    </AppShell>
  )
}
