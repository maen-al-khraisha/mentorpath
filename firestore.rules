rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {
    // ðŸ”’ SECURITY: Only specific admin can access admin functions
    function isDesignatedAdmin() {
      return request.auth != null && 
        request.auth.token.email == 'maen.alkhraisha@gmail.com';
    }

    // Users collection - restricted access
    match /users/{uid} {
      // Allow users to read/write their own profile
      allow read, write: if request.auth != null && request.auth.uid == uid;
      
      // ðŸš« REMOVED: No more admin user creation
      // Only designated admin can manage users
      allow read, write: if isDesignatedAdmin();
    }
    
    // Allow admin to list all users (for admin panel)
    match /users/{document=**} {
      allow list: if isDesignatedAdmin();
    }

    // Usage tracking collection
    match /usage/{usageId} {
      allow read, write: if request.auth != null && request.auth.uid == resource.data.userId;
      allow create: if request.auth != null && request.resource.data.userId == request.auth.uid;
    }

    // Plans collection - only designated admin
    match /plans/{planId} {
      allow read: if true; // Anyone can read plans
      allow write: if isDesignatedAdmin(); // Only designated admin
    }

    // Packages collection - only designated admin
    match /packages/{packageId} {
      allow read: if true; // Anyone can read packages
      allow write: if isDesignatedAdmin(); // Only designated admin
    }

    // Settings collection - only designated admin
    match /settings/{document} {
      allow read: if true; // Anyone can read settings
      allow write: if isDesignatedAdmin(); // Only designated admin
    }

    // Tasks owned by a user
    match /tasks/{taskId} {
      allow read, write: if request.auth != null && request.auth.uid == resource.data.ownerId;
      // On create, ensure ownerId is the caller
      allow create: if request.auth != null && request.resource.data.ownerId == request.auth.uid;
    }

    // Per-task work sessions (timers)
    match /taskWorkSessions/{sessionId} {
      allow read, write: if request.auth != null && request.auth.uid == resource.data.userId;
      allow create: if request.auth != null && request.resource.data.userId == request.auth.uid;
    }

    // Task shift audit log
    match /taskShifts/{shiftId} {
      allow read, write: if request.auth != null && request.auth.uid == resource.data.userId || isDesignatedAdmin();
      allow create: if request.auth != null; // created by client; no sensitive data
    }

    // Sheets owned by a user
    match /sheets/{sheetId} {
      allow read, write: if request.auth != null && request.auth.uid == resource.data.userId;
      // On create, ensure userId is the caller
      allow create: if request.auth != null && request.resource.data.userId == request.auth.uid;
    }

    // Events owned by a user
    match /events/{eventId} {
      allow read, write: if request.auth != null && request.auth.uid == resource.data.userId;
      // On create, ensure userId is the caller
      allow create: if request.auth != null && request.resource.data.userId == request.auth.uid;
    }

    // Habits owned by a user
    match /habits/{habitId} {
      allow read, write: if request.auth != null && request.auth.uid == resource.data.userId;
      // On create, ensure userId is the caller
      allow create: if request.auth != null && request.resource.data.userId == request.auth.uid;
    }

    // Notes owned by a user
    match /notes/{noteId} {
      allow read, write: if request.auth != null && request.auth.uid == resource.data.userId;
      // On create, ensure userId is the caller
      allow create: if request.auth != null && request.resource.data.userId == request.auth.uid;
    }

    // Legacy admins collection (for backward compatibility)
    match /admins/{uid} {
      allow read: if request.auth != null && request.auth.uid == uid || isDesignatedAdmin();
      allow write: if false; // manage via secure server-side script/console
    }

    // Feedback collection - allow anyone to create feedback
    match /feedback/{document} {
      allow create: if true;
      allow read: if isDesignatedAdmin();
    }

    // Debug collection - for testing (remove in production)
    match /debugTest/{document} {
      allow read, write: if request.auth != null;
    }
  }
}
